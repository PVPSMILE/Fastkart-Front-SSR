// import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
// import { ActivatedRoute, Router } from '@angular/router';
// import { Select } from '@ngxs/store';
// import { Observable } from 'rxjs';
// import { Params } from '../../../../../../shared/interface/core.interface';
// import { Category } from '../../../../../../shared/interface/category.interface';
// import { CategoryState } from '../../../../../../shared/state/category.state';

// @Component({
//   selector: 'app-collection-category-filter',
//   templateUrl: './collection-category-filter.component.html',
//   styleUrls: ['./collection-category-filter.component.scss'],
//   standalone: true,
//   imports: []
// })
// export class CollectionCategoryFilterComponent implements OnChanges {
//   @Select(CategoryState.categories) categories$: Observable<Category[]>;

//   @Input() filter: Params;

//   public categories: Category[] = [];
//   public selectedCategories: string[] = [];

//   constructor(private route: ActivatedRoute, private router: Router) {
//     this.categories$.subscribe((categories) => {
//       this.categories = categories; // Загружаем категории из состояния
//     });
//   }

//   ngOnChanges(changes: SimpleChanges) {
//     if (changes['filter']?.currentValue) {
//       this.selectedCategories = this.filter['category']
//         ? this.filter['category'].split(',')
//         : [];
//     }
//   }

//   applyFilter(event: Event) {
//     const value = (<HTMLInputElement>event?.target)?.value;
//     const index = this.selectedCategories.indexOf(value);

//     if ((<HTMLInputElement>event?.target)?.checked) {
//       this.selectedCategories.push(value); // Добавляем выбранную категорию
//     } else {
//       this.selectedCategories.splice(index, 1); // Удаляем категорию из массива
//     }

//     this.router.navigate([], {
//       relativeTo: this.route,
//       queryParams: {
//         category: this.selectedCategories.length
//           ? this.selectedCategories.join(',')
//           : null,
//       },
//       queryParamsHandling: 'merge', // сохраняем остальные query параметры
//       skipLocationChange: false, // триггерим навигацию
//     });
//   }

//   // Проверяем, выбрана ли категория
//   checked(item: string): boolean {
//     return this.selectedCategories.includes(item);
//   }
// }

// import { Component, Input } from '@angular/core';
// import { ActivatedRoute, Router } from '@angular/router';
// import { Select } from '@ngxs/store';
// import { Observable } from 'rxjs';
// import { Params } from '../../../../../../shared/interface/core.interface';
// import { Category, CategoryModel } from '../../../../../../shared/interface/category.interface';
// import { CategoryState } from '../../../../../../shared/state/category.state';


// @Component({
//     selector: 'app-collection-category-filter',
//     templateUrl: './collection-category-filter.component.html',
//     styleUrls: ['./collection-category-filter.component.scss'],
//     standalone: true,
//     imports: []
// })
// export class CollectionCategoryFilterComponent {

//   @Select(CategoryState.category) category$: Observable<CategoryModel>;

//   @Input() filter: Params;

//   public categories: Category[];
//   public selectedCategories: string[] = [];

//   constructor(private route: ActivatedRoute,
//     private router: Router){
//     this.category$.subscribe(res => this.categories = res?.data?.filter(category => category.type == 'category'));
//   }

//   ngOnChanges() {
//     this.selectedCategories = this.filter['category'] ? this.filter['category'].split(',') : [];
//   }

//   applyFilter(event: Event) {
//     const index = this.selectedCategories.indexOf((<HTMLInputElement>event?.target)?.value);  // checked and unchecked value

//     if ((<HTMLInputElement>event?.target)?.checked)
//       this.selectedCategories.push((<HTMLInputElement>event?.target)?.value); // push in array cheked value
//     else
//       this.selectedCategories.splice(index,1);  // removed in array unchecked value

//     this.router.navigate([], {
//       relativeTo: this.route,
//       queryParams: {
//         category: this.selectedCategories.length ? this.selectedCategories.join(",") : null
//       },
//       queryParamsHandling: 'merge', // preserve the existing query params in the route
//       skipLocationChange: false  // do trigger navigation
//     });
//   }

//   // check if the item are selected
//   checked(item: string){
//     if(this.selectedCategories?.indexOf(item) != -1){
//       return true;
//     }
//     return false;
//   }

// }
